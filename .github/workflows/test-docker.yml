name: Test Docker Images

on:
  pull_request:
    paths:
      - "Dockerfile*"
      - "docker-compose.yml"
      - "entrypoint.sh"
      - ".github/workflows/test-docker.yml"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: gstd-test

jobs:
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: ["Dockerfile", "Dockerfile.alpine"]
        platform: ["linux/amd64"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image structure
        run: |
          echo "Testing image: ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }}"

          # Test that gstd binary exists and is executable
          docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} which gstd

          # Test that bun is installed
          docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} which bun

          # Test that the user is non-root
          USER_ID=$(docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "ERROR: Container is running as root"
            exit 1
          fi
          echo "✅ Container running as non-root user (UID: $USER_ID)"

          # Test that required GStreamer plugins are available
          docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} gst-inspect-1.0 --version

      - name: Test gstd startup
        run: |
          echo "Testing gstd daemon startup..."

          # Start container in background
          CONTAINER_ID=$(docker run -d -p 8080:8080 --cap-add=SYS_ADMIN ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} gstd-only)

          # Wait for startup
          sleep 10

          # Check if gstd is responding
          if curl -f http://localhost:8080/pipelines; then
            echo "✅ gstd daemon is responding"
          else
            echo "❌ gstd daemon is not responding"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Test entrypoint modes
        run: |
          echo "Testing entrypoint script modes..."

          # Test gstd-only mode
          timeout 15s docker run --rm --cap-add=SYS_ADMIN ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} gstd-only &
          sleep 5
          kill %1 || true

          # Test client-only mode (should exit quickly if no example.ts)  
          docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} client-only || true

          echo "✅ Entrypoint modes working"

      - name: Test security features
        run: |
          echo "Testing security features..."

          # Test that container cannot write to root filesystem
          if docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} touch /test-file 2>/dev/null; then
            echo "❌ Container can write to root filesystem"
            exit 1
          else
            echo "✅ Root filesystem is read-only"
          fi

          # Test that /tmp is writable
          docker run --rm ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }} touch /tmp/test-file
          echo "✅ /tmp is writable"

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test-${{ matrix.dockerfile }}
          format: table
          exit-code: 1
          severity: "CRITICAL,HIGH"
        continue-on-error: true

  test-compose:
    runs-on: ubuntu-latest
    needs: test-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test docker-compose
        run: |
          echo "Testing docker-compose configuration..."

          # Validate docker-compose file
          docker-compose config

          # Test build with docker-compose
          docker-compose build

          # Start services
          docker-compose up -d

          # Wait for services to be ready
          sleep 15

          # Test health check
          if docker-compose ps | grep -q "healthy\|Up"; then
            echo "✅ Services are running"
          else
            echo "❌ Services failed to start"
            docker-compose logs
            exit 1
          fi

          # Test API endpoint
          if curl -f http://localhost:8080/pipelines; then
            echo "✅ API is accessible"
          else
            echo "❌ API is not accessible"
            docker-compose logs
            exit 1
          fi

          # Cleanup
          docker-compose down

  report-results:
    runs-on: ubuntu-latest
    needs: [test-build, test-compose]
    if: always()

    steps:
      - name: Report test results
        run: |
          if [ "${{ needs.test-build.result }}" = "success" ] && [ "${{ needs.test-compose.result }}" = "success" ]; then
            echo "✅ All Docker tests passed successfully!"
          else
            echo "❌ Some Docker tests failed"
            echo "Build tests: ${{ needs.test-build.result }}"
            echo "Compose tests: ${{ needs.test-compose.result }}"
            exit 1
          fi
